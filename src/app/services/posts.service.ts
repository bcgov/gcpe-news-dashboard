/**
 * BC Gov News API Service 1.0
 * News API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs'; // Manually edited to avoid including rxjs-compat

import { KeyValuePair2 } from '../view-models/news/keyValuePair2';
import { Post } from '../view-models/news/post';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PostsService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get the posts associated with the keys in the list passed in.
     * 
     * @param apiVersion The requested API version
     * @param postKeys 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postsGet(apiVersion: string, postKeys?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<Post>>;
    public postsGet(apiVersion: string, postKeys?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Post>>>;
    public postsGet(apiVersion: string, postKeys?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Post>>>;
    public postsGet(apiVersion: string, postKeys?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling postsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (postKeys) {
            postKeys.forEach((element) => {
                queryParameters = queryParameters.append('postKeys', <any>element);
            })
        }
        if (apiVersion !== undefined) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Post>>(`${this.basePath}/api/Posts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all keys for the specified index (newsroom or category)
     * 
     * @param indexKind home or one of categories
     * @param indexKey default or one key of the categories (ministries, sectors, services, tags, themes)
     * @param apiVersion The requested API version
     * @param postKind One of: releases, stories, factsheets, updates or default (releases+stories+factsheets)
     * @param count number of posts to return
     * @param skip number of posts to skip
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postsGetAllKeys(indexKind: string, indexKey: string, apiVersion: string, postKind?: string, count?: number, skip?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<KeyValuePair2>>;
    public postsGetAllKeys(indexKind: string, indexKey: string, apiVersion: string, postKind?: string, count?: number, skip?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KeyValuePair2>>>;
    public postsGetAllKeys(indexKind: string, indexKey: string, apiVersion: string, postKind?: string, count?: number, skip?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KeyValuePair2>>>;
    public postsGetAllKeys(indexKind: string, indexKey: string, apiVersion: string, postKind?: string, count?: number, skip?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexKind === null || indexKind === undefined) {
            throw new Error('Required parameter indexKind was null or undefined when calling postsGetAllKeys.');
        }
        if (indexKey === null || indexKey === undefined) {
            throw new Error('Required parameter indexKey was null or undefined when calling postsGetAllKeys.');
        }
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling postsGetAllKeys.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (postKind !== undefined) {
            queryParameters = queryParameters.set('postKind', <any>postKind);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }
        if (skip !== undefined) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (apiVersion !== undefined) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<KeyValuePair2>>(`${this.basePath}/api/Posts/Keys/${encodeURIComponent(String(indexKind))}/${encodeURIComponent(String(indexKey))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the post key associated with the reference.
     * 
     * @param reference 
     * @param apiVersion The requested API version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postsGetKeyFromReference(reference: string, apiVersion: string, observe?: 'body', reportProgress?: boolean): Observable<KeyValuePair2>;
    public postsGetKeyFromReference(reference: string, apiVersion: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<KeyValuePair2>>;
    public postsGetKeyFromReference(reference: string, apiVersion: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<KeyValuePair2>>;
    public postsGetKeyFromReference(reference: string, apiVersion: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (reference === null || reference === undefined) {
            throw new Error('Required parameter reference was null or undefined when calling postsGetKeyFromReference.');
        }
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling postsGetKeyFromReference.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiVersion !== undefined) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<KeyValuePair2>(`${this.basePath}/api/Posts/Keys/${encodeURIComponent(String(reference))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the latest posts of postKind for the specified index (default or category)
     * 
     * @param indexKind home or one of categories
     * @param indexKey default or one key of the categories (ministries, sectors, services, tags, themes)
     * @param apiVersion The requested API version
     * @param postKind One of: releases, stories, factsheets, updates or default (releases+stories except top/feature for categories)
     * @param count number of posts to return
     * @param skip number of posts to skip
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postsGetLatest(indexKind: string, indexKey: string, apiVersion: string, postKind?: string, count?: number, skip?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Post>>;
    public postsGetLatest(indexKind: string, indexKey: string, apiVersion: string, postKind?: string, count?: number, skip?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Post>>>;
    public postsGetLatest(indexKind: string, indexKey: string, apiVersion: string, postKind?: string, count?: number, skip?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Post>>>;
    public postsGetLatest(indexKind: string, indexKey: string, apiVersion: string, postKind?: string, count?: number, skip?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (indexKind === null || indexKind === undefined) {
            throw new Error('Required parameter indexKind was null or undefined when calling postsGetLatest.');
        }
        if (indexKey === null || indexKey === undefined) {
            throw new Error('Required parameter indexKey was null or undefined when calling postsGetLatest.');
        }
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling postsGetLatest.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (postKind !== undefined) {
            queryParameters = queryParameters.set('postKind', <any>postKind);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }
        if (skip !== undefined) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (apiVersion !== undefined) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Post>>(`${this.basePath}/api/Posts/Latest/${encodeURIComponent(String(indexKind))}/${encodeURIComponent(String(indexKey))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the latest Social Media post for the social media type passed in.
     * 
     * @param mediaType 
     * @param apiVersion The requested API version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postsGetLatestMediaUri(mediaType: string, apiVersion: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public postsGetLatestMediaUri(mediaType: string, apiVersion: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public postsGetLatestMediaUri(mediaType: string, apiVersion: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public postsGetLatestMediaUri(mediaType: string, apiVersion: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (mediaType === null || mediaType === undefined) {
            throw new Error('Required parameter mediaType was null or undefined when calling postsGetLatestMediaUri.');
        }
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling postsGetLatestMediaUri.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiVersion !== undefined) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/api/Posts/LatestMediaUri/${encodeURIComponent(String(mediaType))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the post associated with the key
     * 
     * @param key 
     * @param apiVersion The requested API version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postsGetOne(key: string, apiVersion: string, observe?: 'body', reportProgress?: boolean): Observable<Post>;
    public postsGetOne(key: string, apiVersion: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Post>>;
    public postsGetOne(key: string, apiVersion: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Post>>;
    public postsGetOne(key: string, apiVersion: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling postsGetOne.');
        }
        if (apiVersion === null || apiVersion === undefined) {
            throw new Error('Required parameter apiVersion was null or undefined when calling postsGetOne.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (apiVersion !== undefined) {
            queryParameters = queryParameters.set('api-version', <any>apiVersion);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Post>(`${this.basePath}/api/Posts/${encodeURIComponent(String(key))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
